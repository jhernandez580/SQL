# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#Determine the Top 10 artists by popularity.
SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10

#Determine which artist released the longest song.
SELECT artist_name, duration_ms,track_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY duration_ms DESC
LIMIT 1;

#Write a SQL query to find the average popularity of tracks for each artist. Display the result with columns: 
artist_name and avg_popularity. Also, order the results by avg_popularity in descending order. Finally, limit the results to 15.
SELECT artist_name,AVG(popularity) AS avg_popularity
FROM spotifydata
GROUP BY artist_name
ORDER BY avg_popularity DESC 
LIMIT 15;

#Write a SQL query to find the top 5 tracks with the highest danceability and energy, along with their respective artist names.
Include the columns: artist_name, track_name, danceability, and energy. Order the results by a combination of danceability and 
energy in descending order.
SELECT artist_name,track_name,danceability,energy
FROM spotifydata
ORDER BY danceability DESC, energy DESC
LIMIT 5;

#Write a SQL query to find the average danceability and energy for tracks released by artists who have at least two tracks with a popularity 
score greater than 80. Exclude tracks with popularity scores less than or equal to 70. Include the columns: artist_name, avg_danceability,
and avg_energy. Order the result by avg_danceability and avg_energy in descending order. 
WITH PopularArtists AS (
SELECT artist_name
FROM spotifydata
WHERE popularity > 80
GROUP BY artist_name
HAVING COUNT(*) >= 2
)

SELECT p.artist_name,AVG(s.danceability) AS avg_danceability,AVG(s.energy) AS avg_energy
FROM PopularArtists p
JOIN spotifydata s ON p.artist_name = s.artist_name
WHERE s.popularity > 70
GROUP BY p.artist_name
ORDER BY avg_danceability DESC, avg_energy DESC;

#Write a SQL query to find the top 3 artists with the highest average popularity among their tracks. However, exclude artists who have 
tracks with a duration greater than the overall average duration of all tracks in the table. Include the columns:
artist_name and avg_popularity. Order the result by avg_popularity in descending order. 
WITH AvgTrackDuration AS (
SELECT AVG(duration_ms) AS avg_duration
FROM spotifydata
)

SELECT artist_name,AVG(popularity) AS avg_popularity
FROM spotifydata
WHERE artist_name IN (
SELECT artist_name
FROM spotifydata        
GROUP BY artist_name
HAVING MAX(duration_ms) <= (SELECT avg_duration FROM AvgTrackDuration) 
)
GROUP BY artist_name
ORDER BY avg_popularity DESC
LIMIT 3;

